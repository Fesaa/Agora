// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250529083405_MeetingAck")]
    partial class MeetingAck
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("API.Entities.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeRange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("API.Entities.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AlertManagement")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Cost")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("API.Entities.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Acknowledged")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Attendees")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("API.Entities.MeetingRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MayExceedCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MergeAble")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresAck")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MeetingRooms");
                });

            modelBuilder.Entity("API.Entities.MergeRooms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentRoomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentRoomId");

                    b.ToTable("MergeRooms");
                });

            modelBuilder.Entity("API.Entities.ServerSetting", b =>
                {
                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("ServerSettings");
                });

            modelBuilder.Entity("API.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Default")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ThemeProvider")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("API.Entities.UserEmail", b =>
                {
                    b.Property<string>("ExternalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ExternalId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("API.Entities.UserPreferences", b =>
                {
                    b.Property<string>("ExternalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ExternalId");

                    b.ToTable("AppUserPreferences");
                });

            modelBuilder.Entity("FacilityMeetingRoom", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeetingRoomsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FacilitiesId", "MeetingRoomsId");

                    b.HasIndex("MeetingRoomsId");

                    b.ToTable("FacilityMeetingRoom");
                });

            modelBuilder.Entity("MeetingRoomMergeRooms", b =>
                {
                    b.Property<int>("MeetingRoomsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MergeRoomsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MeetingRoomsId", "MergeRoomsId");

                    b.HasIndex("MergeRoomsId");

                    b.ToTable("MeetingRoomMergeRooms", (string)null);
                });

            modelBuilder.Entity("API.Entities.Availability", b =>
                {
                    b.HasOne("API.Entities.Facility", null)
                        .WithMany("Availability")
                        .HasForeignKey("FacilityId");
                });

            modelBuilder.Entity("API.Entities.Facility", b =>
                {
                    b.HasOne("API.Entities.Meeting", null)
                        .WithMany("UsedFacilities")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("API.Entities.Meeting", b =>
                {
                    b.HasOne("API.Entities.MeetingRoom", "Room")
                        .WithMany("Meetings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("API.Entities.MergeRooms", b =>
                {
                    b.HasOne("API.Entities.MeetingRoom", "Parent")
                        .WithMany("ParentMergeRooms")
                        .HasForeignKey("ParentRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FacilityMeetingRoom", b =>
                {
                    b.HasOne("API.Entities.Facility", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.MeetingRoom", null)
                        .WithMany()
                        .HasForeignKey("MeetingRoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingRoomMergeRooms", b =>
                {
                    b.HasOne("API.Entities.MeetingRoom", null)
                        .WithMany()
                        .HasForeignKey("MeetingRoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.MergeRooms", null)
                        .WithMany()
                        .HasForeignKey("MergeRoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.Facility", b =>
                {
                    b.Navigation("Availability");
                });

            modelBuilder.Entity("API.Entities.Meeting", b =>
                {
                    b.Navigation("UsedFacilities");
                });

            modelBuilder.Entity("API.Entities.MeetingRoom", b =>
                {
                    b.Navigation("Meetings");

                    b.Navigation("ParentMergeRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
